# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g0Ov0smMhQRYtEl_e6yfJdogG6rS_cwS
"""

import pandas as pd
import numpy as np
import sklearn as sk

from google.colab import files
uploaded=files.upload()

import io

df=pd.read_csv(io.BytesIO(uploaded['creditcard.csv']))
df.head()

#no of fraud and non fraud points
frauds=df.loc[df['Class']==1]
non_frauds=df.loc[df['Class']==0]
print(len(frauds),len(non_frauds))

#graph plotting with scatter-plot
import matplotlib.pyplot as plt
axis=frauds.plot.scatter(x='Amount', y='Class', color='Red', label='Fraud')
non_frauds.plot.scatter(x='Amount', y='Class', color='Blue', label='Normal', ax=axis)
plt.show()

from sklearn.preprocessing import scale
from time import time
import matplotlib.pyplot as plt

from sklearn import metrics
from sklearn.cluster import KMeans
from sklearn.datasets import load_digits
from sklearn.decomposition import PCA
from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split
X = df.iloc[:,:-1]
y = df['Class']

data = scale(X)
pca = PCA(n_components=2)
X_reduced = pca.fit_transform(data)

X_train, X_test, y_train, y_test = train_test_split(X_reduced, y, test_size = 0.33, random_state=42)

from sklearn import linear_model
loreg=linear_model.LogisticRegression()
loreg.fit(X_train, y_train)
print(loreg.score(X_test, y_test))

#confusion matrix building
!pip install pandas_ml
y_predicted = np.array(loreg.predict(X_test))
y_right = np.array(y_test)
from pandas_ml import ConfusionMatrix
confusion_matrix = ConfusionMatrix(y_right, y_predicted)
print("Confusion matrix:\n%s" % confusion_matrix)
confusion_matrix.plot(normalized=True)
plt.show()
confusion_matrix.print_stats()

#Oversampling the data
import pandas_ml as pdml
df2= pdml.ModelFrame(X, target=y)
sampler = df2.imbalance.over_sampling.SMOTE()
sampled = df2.fit_sample(sampler)

#re-training and testing the accuracy after oversampling
from sklearn.preprocessing import scale

X1 = sampled.iloc[:,1:]
y1 = sampled['Class']

X1 = scale(X1)

X_train1, X_test1, y_train1, y_test1 = train_test_split(X1, y1.as_matrix(), test_size=0.35, random_state=250)
lr= linear_model.LogisticRegression()
lr.fit(X_train1, y_train1)
print("Percentage accuracy: ", lr.score(X_test1, y_test1)*100)

#confusion matrix after oversampling
y_predicted1 = np.array(lr.predict(X_test1))
y_right1 = np.array(y_test1)

confusion_matrix1 = ConfusionMatrix(y_right1, y_predicted1)
print("Confusion matrix:\n%s" % confusion_matrix1)
confusion_matrix1.plot(normalized=True)
plt.show()
confusion_matrix1.print_stats()

